#!/usr/bin/env python3
"""
CIRIS Manager CLI Authentication Tool

Uses OAuth Device Flow for secure authentication.
"""

import sys
import time
import json
import requests
import argparse
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime, timedelta


class CIRISAuth:
    """Handle CIRIS Manager authentication via device flow."""
    
    def __init__(self, base_url: str = "https://agents.ciris.ai"):
        self.base_url = base_url.rstrip("/")
        self.token_file = Path.home() / ".config" / "ciris-manager" / "token.json"
        self.token_file.parent.mkdir(parents=True, exist_ok=True)
    
    def request_device_code(self) -> Dict[str, Any]:
        """Request a device code from the manager."""
        url = f"{self.base_url}/manager/v1/device/code"
        
        try:
            response = requests.post(
                url,
                json={"client_id": "ciris-cli", "scope": "manager:full"},
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Failed to request device code: {e}")
            sys.exit(1)
    
    def poll_for_token(self, device_code: str, interval: int = 5, timeout: int = 600) -> Optional[str]:
        """Poll for token authorization."""
        url = f"{self.base_url}/manager/v1/device/token"
        end_time = time.time() + timeout
        
        while time.time() < end_time:
            try:
                response = requests.post(
                    url,
                    json={"device_code": device_code, "client_id": "ciris-cli"},
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    return data["access_token"]
                
                error_data = response.json()
                error = error_data.get("error")
                
                if error == "authorization_pending":
                    # Still waiting for user
                    time.sleep(interval)
                elif error == "slow_down":
                    # Increase polling interval
                    interval = min(interval * 2, 30)
                    time.sleep(interval)
                elif error in ["access_denied", "expired_token"]:
                    print(f"\n‚ùå {error_data.get('error_description', 'Authorization failed')}")
                    return None
                else:
                    print(f"\n‚ùå Unexpected error: {error_data}")
                    return None
                    
            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è  Authentication cancelled")
                return None
            except requests.exceptions.RequestException as e:
                print(f"\n‚ùå Network error: {e}")
                time.sleep(interval)
        
        print("\n‚ùå Authentication timed out")
        return None
    
    def save_token(self, token: str, email: str) -> None:
        """Save token to disk."""
        expires_at = datetime.utcnow() + timedelta(hours=1)
        
        token_data = {
            "token": token,
            "email": email,
            "expires_at": expires_at.isoformat(),
            "base_url": self.base_url
        }
        
        self.token_file.write_text(json.dumps(token_data, indent=2))
        # Secure the token file
        self.token_file.chmod(0o600)
    
    def get_saved_token(self) -> Optional[str]:
        """Get saved token if still valid."""
        if not self.token_file.exists():
            return None
        
        try:
            data = json.loads(self.token_file.read_text())
            expires_at = datetime.fromisoformat(data["expires_at"])
            
            if datetime.utcnow() < expires_at:
                return data["token"]
            else:
                print("‚ÑπÔ∏è  Saved token has expired")
                return None
                
        except Exception:
            return None
    
    def authenticate(self, email: str, force: bool = False) -> Optional[str]:
        """Perform device flow authentication."""
        # Check for existing valid token
        if not force:
            token = self.get_saved_token()
            if token:
                print(f"‚úÖ Using saved token for {email}")
                return token
        
        print(f"üîê Authenticating {email} with CIRIS Manager...")
        
        # Request device code
        device_data = self.request_device_code()
        
        print("\n" + "="*60)
        print(f"üåê Please visit: {device_data['verification_uri']}")
        print(f"üìù Enter code: {device_data['user_code']}")
        print("="*60 + "\n")
        
        print("‚è≥ Waiting for authorization", end="", flush=True)
        
        # Poll for token
        token = self.poll_for_token(
            device_data["device_code"],
            device_data.get("interval", 5)
        )
        
        if token:
            print("\n‚úÖ Authentication successful!")
            self.save_token(token, email)
            return token
        
        return None
    
    def test_token(self, token: str) -> bool:
        """Test if token is valid."""
        try:
            response = requests.get(
                f"{self.base_url}/manager/v1/status",
                headers={"Authorization": f"Bearer {token}"},
                timeout=5
            )
            return response.status_code == 200
        except:
            return False
    
    def logout(self) -> None:
        """Remove saved token."""
        if self.token_file.exists():
            self.token_file.unlink()
            print("‚úÖ Logged out successfully")
        else:
            print("‚ÑπÔ∏è  No saved credentials found")


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="CIRIS Manager Authentication Tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  ciris-auth login user@ciris.ai          # Authenticate with CIRIS Manager
  ciris-auth login user@ciris.ai --force  # Force re-authentication
  ciris-auth status                       # Check authentication status
  ciris-auth token                        # Display current token
  ciris-auth logout                       # Remove saved credentials
  
  # Use with curl:
  curl -H "Authorization: Bearer $(ciris-auth token)" https://agents.ciris.ai/manager/v1/agents
        """
    )
    
    parser.add_argument(
        "command",
        choices=["login", "logout", "status", "token"],
        help="Command to execute"
    )
    
    parser.add_argument(
        "email",
        nargs="?",
        help="Email address for authentication (required for login)"
    )
    
    parser.add_argument(
        "--force", "-f",
        action="store_true",
        help="Force re-authentication even if valid token exists"
    )
    
    parser.add_argument(
        "--url",
        default="https://agents.ciris.ai",
        help="CIRIS Manager URL (default: https://agents.ciris.ai)"
    )
    
    args = parser.parse_args()
    
    auth = CIRISAuth(args.url)
    
    if args.command == "login":
        if not args.email:
            print("‚ùå Email address required for login")
            sys.exit(1)
        
        if not args.email.endswith("@ciris.ai"):
            print("‚ö†Ô∏è  Warning: Only @ciris.ai email addresses can access production")
        
        token = auth.authenticate(args.email, force=args.force)
        if not token:
            sys.exit(1)
    
    elif args.command == "logout":
        auth.logout()
    
    elif args.command == "status":
        token = auth.get_saved_token()
        if token and auth.test_token(token):
            print("‚úÖ Authenticated and token is valid")
        else:
            print("‚ùå Not authenticated or token expired")
            sys.exit(1)
    
    elif args.command == "token":
        token = auth.get_saved_token()
        if token:
            # Output just the token for easy use in scripts
            print(token)
        else:
            print("‚ùå No valid token found. Run 'ciris-auth login' first", file=sys.stderr)
            sys.exit(1)


if __name__ == "__main__":
    main()