name: Deploy Telemetry System

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/ciris-telemetry

jobs:
  test:
    name: Test Telemetry System
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run telemetry tests
        run: |
          pytest tests/telemetry/ -v -m "not flaky" --ignore=tests/telemetry/test_agent_collector_old.py || true


  deploy:
    name: Deploy Telemetry Service
    runs-on: ubuntu-latest
    needs: test
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Deploy to production
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          # Create deployment script
          cat > /tmp/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Deploying telemetry system..."
          
          # Update CIRISManager
          cd /opt/ciris-manager
          git pull origin main
          pip install -e .
          
          # Update configuration for in-memory telemetry
          cat > /etc/ciris-manager/telemetry.yml << EOC
          telemetry:
            enabled: true
            collection_interval: 60
            enable_public_api: true
            enable_storage: false
            collectors:
              docker: true
              agents: true
              deployments: true
              versions: true
          EOC
          
          # Restart service to pick up changes
          systemctl restart ciris-manager
          
          # Wait for service to be healthy
          sleep 5
          systemctl is-active ciris-manager
          
          echo "Deployment completed successfully"
          EOF
          
          # Copy and execute deployment script
          scp /tmp/deploy.sh ${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/
          ssh ${DEPLOY_USER}@${DEPLOY_HOST} "chmod +x /tmp/deploy.sh && sudo /tmp/deploy.sh"
      
      - name: Verify deployment
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          API_ENDPOINT: https://agents.ciris.ai
        run: |
          # Wait for service to be ready
          sleep 10
          
          # Check manager health endpoint (telemetry is part of manager)
          response=$(curl -s -o /dev/null -w "%{http_code}" ${API_ENDPOINT}/manager/v1/health)
          if [ "$response" != "200" ]; then
            echo "Health check failed with status: $response"
            exit 1
          fi
          
          echo "Manager with telemetry is healthy"

  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Monitor telemetry collection
        env:
          API_ENDPOINT: https://agents.ciris.ai
        run: |
          # Quick check that telemetry is running
          echo "Checking telemetry status..."
          
          # Get telemetry status from manager
          response=$(curl -s -o /dev/null -w "%{http_code}" ${API_ENDPOINT}/manager/v1/telemetry/status)
          
          if [ "$response" == "200" ]; then
            echo "Telemetry endpoint is responding"
          else
            echo "Warning: Telemetry status returned $response"
          fi

