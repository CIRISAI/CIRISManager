name: Deploy CIRISManager

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual deployment

jobs:
  # First ensure CI passes
  ci:
    name: Run CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .[dev]
      
      - name: Run linting
        run: |
          ruff check ciris_manager/
          ruff format --check ciris_manager/
      
      - name: Run type checking
        run: |
          mypy ciris_manager/
      
      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=ciris_manager --cov-report=term-missing
      
      # Build TypeScript SDK
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Build TypeScript Manager SDK
        run: |
          cd sdk/typescript/packages/cirismanager-sdk
          npm ci
          npm run build
          npm run build:browser
          npm test
      
      - name: Build TypeScript Telemetry SDK
        run: |
          cd sdk/typescript/packages/ciristelemetry-sdk
          npm ci
          npm run build
          npm run build:browser
          npm test
      
      - name: Verify SDK builds
        run: |
          echo "=== Manager SDK ==="
          ls -la sdk/typescript/packages/cirismanager-sdk/dist/ || true
          ls -la sdk/typescript/packages/cirismanager-sdk/dist-browser/ || true
          test -f sdk/typescript/packages/cirismanager-sdk/dist-browser/cirismanager-sdk.js || echo "Manager SDK browser build not found"
          
          echo "=== Telemetry SDK ==="
          ls -la sdk/typescript/packages/ciristelemetry-sdk/dist/ || true
          test -f sdk/typescript/packages/ciristelemetry-sdk/dist/ciristelemetry-sdk.min.js || echo "Telemetry SDK browser build not found"
    
  deploy:
    name: Deploy to Production
    needs: ci  # Only deploy if CI passes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository == 'CIRISAI/CIRISManager'
    environment: production
    
    steps:
      - name: Deploy CIRISManager
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 108.61.119.117
          username: root
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -e
            
            echo "Deploying CIRISManager..."
            
            # Ensure base directory exists
            mkdir -p /opt
            
            # Clone or update repository
            if [ ! -d "/opt/ciris-manager" ]; then
              echo "First time deployment - cloning repository..."
              git clone https://github.com/CIRISAI/CIRISManager.git /opt/ciris-manager
            else
              echo "Updating existing deployment..."
              cd /opt/ciris-manager
              git fetch origin
              git reset --hard origin/main
            fi
            
            cd /opt/ciris-manager
            
            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              echo "Creating virtual environment..."
              python3 -m venv venv
            fi
            
            # Activate venv and update dependencies
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install -e .
            
            # Ensure config directory exists
            mkdir -p /etc/ciris-manager
            
            # Generate default config if it doesn't exist
            if [ ! -f "/etc/ciris-manager/config.yml" ]; then
              echo "Generating default configuration..."
              ciris-manager --generate-config --config /etc/ciris-manager/config.yml
            fi
            
            # Create update script if it doesn't exist
            if [ ! -f "/usr/local/bin/ciris-manager-update" ]; then
              cat > /usr/local/bin/ciris-manager-update << 'SCRIPT'
            #!/bin/bash
            cd /opt/ciris-manager
            git pull origin main
            source venv/bin/activate
            pip install -r requirements.txt
            pip install -e .
            systemctl restart ciris-manager
            echo "CIRISManager updated successfully"
            SCRIPT
              chmod +x /usr/local/bin/ciris-manager-update
            fi
            
            # Create systemd service if it doesn't exist
            if [ ! -f "/etc/systemd/system/ciris-manager.service" ]; then
              # Copy the proper service file
              cp /opt/ciris-manager/deployment/ciris-manager.service /etc/systemd/system/
              systemctl daemon-reload
              systemctl enable ciris-manager
            fi
            
            # Ensure ciris-manager user exists and is in correct groups
            if ! id "ciris-manager" &>/dev/null; then
              useradd -r -s /bin/false -d /var/lib/ciris-manager -c "CIRIS Manager Service" ciris-manager
            fi
            
            # Create ciris group if it doesn't exist
            if ! getent group ciris &>/dev/null; then
              groupadd ciris
            fi
            
            # Add ciris-manager to necessary groups
            usermod -aG docker ciris-manager
            usermod -aG ciris ciris-manager
            
            # Fix permissions on existing nginx directory
            chown -R ciris-manager:ciris /home/ciris/nginx
            chmod 775 /home/ciris/nginx
            
            # Ensure ciris home directory has proper permissions for group access
            chmod 755 /home/ciris
            
            # Copy static files for manager UI and dashboard
            echo "Deploying static files..."
            mkdir -p /home/ciris/static/manager
            mkdir -p /home/ciris/static/dashboard
            mkdir -p /home/ciris/static/sdk
            cp -r /opt/ciris-manager/static/manager/* /home/ciris/static/manager/
            cp -r /opt/ciris-manager/static/dashboard/* /home/ciris/static/dashboard/
            
            # Build and deploy telemetry SDK
            if [ -f /opt/ciris-manager/scripts/build-telemetry-sdk.sh ]; then
              echo "Building telemetry SDK..."
              cd /opt/ciris-manager
              bash scripts/build-telemetry-sdk.sh
              cp static/sdk/ciristelemetry-sdk.min.js /home/ciris/static/sdk/
            fi
            
            chown -R ciris-manager:ciris /home/ciris/static
            chmod -R 755 /home/ciris/static
            
            # Deploy PostgreSQL container if not running
            if ! docker ps | grep -q ciris-postgres; then
              echo "Deploying PostgreSQL container..."
              cd /opt/ciris-manager
              # Set a secure password if not already set
              if [ ! -f /opt/ciris-manager/.env ]; then
                echo "POSTGRES_PASSWORD=$(openssl rand -base64 32)" > /opt/ciris-manager/.env
                chmod 600 /opt/ciris-manager/.env
              fi
              
              # Load the password for the service
              source /opt/ciris-manager/.env
              
              # Create environment file for systemd service
              cat > /etc/ciris-manager/environment <<EOF
# Auto-generated environment file for CIRISManager
TELEMETRY_DATABASE_URL=postgresql://ciris:${POSTGRES_PASSWORD}@localhost:5432/telemetry
EOF
              chmod 600 /etc/ciris-manager/environment
              
              docker-compose -f docker-compose-production.yml up -d postgres
              
              # Wait for PostgreSQL to be ready
              echo "Waiting for PostgreSQL to be ready..."
              for i in {1..30}; do
                if docker exec ciris-postgres pg_isready -U ciris -d telemetry 2>/dev/null; then
                  echo "PostgreSQL is ready!"
                  break
                fi
                if [ $i -eq 30 ]; then
                  echo "PostgreSQL failed to start!"
                  docker logs ciris-postgres --tail 50
                  exit 1
                fi
                sleep 2
              done
            fi
            
            # Deploy nginx container if not running
            if ! docker ps | grep -q ciris-nginx; then
              echo "Deploying nginx container..."
              cd /opt/ciris-manager
              docker-compose -f docker-compose-production.yml up -d nginx
            else
              echo "Nginx container already running, pulling latest config..."
              cd /opt/ciris-manager
              docker-compose -f docker-compose-production.yml pull nginx
              docker-compose -f docker-compose-production.yml up -d nginx
            fi
            
            # Restart CIRISManager
            echo "Restarting CIRISManager..."
            systemctl restart ciris-manager
            
            # Wait for service to be ready
            echo "Waiting for CIRISManager to be ready..."
            for i in {1..30}; do
              if curl -f http://localhost:8888/manager/v1/health 2>/dev/null; then
                echo "CIRISManager is healthy!"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "CIRISManager failed to start!"
                journalctl -u ciris-manager --no-pager -n 50
                exit 1
              fi
              sleep 2
            done
            
            echo "Deployment complete!"
            
      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 108.61.119.117
          username: root
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Check service status
            echo "=== Service Status ==="
            systemctl status ciris-manager --no-pager || true
            
            # Check API health
            echo -e "\n=== API Health Check ==="
            curl -s http://localhost:8888/manager/v1/health | jq . || echo "Health check failed"
            
            # Check nginx status
            echo -e "\n=== Nginx Status ==="
            docker ps | grep nginx || echo "Nginx container not running"
            
            # Show recent logs
            echo -e "\n=== Recent Logs ==="
            journalctl -u ciris-manager --no-pager -n 20